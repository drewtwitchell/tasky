name: Tasky app deploy to EKS
on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  wiz-cli-iac-scan:
    name: 'Wiz-cli IaC Scan'
    runs-on: ubuntu-latest
    env:
      SCAN_PATH: "." # Set the relative path in the repo to scan
      POLICY: "Default IaC policy" # Set the desired Wiz CLI policy to use

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Check out repository
      uses: actions/checkout@v2
    
    - name: Read Image Version from File
      id: image_version
      run: echo "IMAGE_TAG=$(cat image_version.txt)" >> $GITHUB_ENV

    - name: Download Wiz CLI
      run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

    - name: Authenticate to Wiz
      run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
      env:
        WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
        WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

    - name: Run wiz CLI IaC scan
      run: ./wizcli iac scan --path $SCAN_PATH --policy "$POLICY"
  
  wiz-cli-image-scan:
    name: 'Wiz-cli Image Scan'
    runs-on: ubuntu-latest
    env:
      SCAN_PATH: "." # Set the relative path in the repo to build the image from
      TAG: $IMAGE_TAG # Set the tag to use for the image
      POLICY: "Default vulnerabilities policy" # Set the desired Wiz CLI policy to use

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Check out repository
      uses: actions/checkout@v2
    
    - name: Read Image Version from File
      id: image_version
      run: echo "IMAGE_TAG=$(cat image_version.txt)" >> $GITHUB_ENV

    # It's possible to skip this step if this job is scheduled after an image-build job.
    # If that's the case, also set "Run wiz CLI docker image scan" step accordingly
    - name: Build the Docker image
      run: cd $SCAN_PATH && docker build . --tag $TAG # Configure to fit the params you use to build your image

    - name: Download Wiz CLI
      run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

    - name: Authenticate to Wiz
      run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
      env:
        WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
        WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

    - name: Run wiz-cli docker image scan
      run: ./wizcli docker scan --image $TAG --policy "$POLICY"
      
    - name: Fetch digest of Docker image for Graph enrichment
      run: ./wizcli docker tag --image $TAG
  
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Read Image Version from File
      id: image_version
      run: echo "IMAGE_TAG=$(cat image_version.txt)" >> $GITHUB_ENV

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.24.0' # default is latest stable
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Build, tag, and push docker image to Amazon ECR Public
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: ${{ vars.REGISTRY_ALIAS }}
        REPOSITORY: ${{ vars.ECR_NAME }}
        IMAGE_TAG: $IMAGE_TAG
      run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      
  
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Read Image Version from File
      id: image_version
      run: echo "IMAGE_TAG=$(cat image_version.txt)" >> $GITHUB_ENV

    - name: Update Kubernetes Deployment with Image Tag
      run: |
        sed -i "s/IMAGETAG/${IMAGE_TAG}/g" deployment.yaml

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        aws-region: us-east-1

    - name: Update KubeConfig
      run: | 
            mkdir -p $HOME/.kube
            echo "$KUBE_CONFIG_DATA" | base64 -d > $HOME/.kube/config
            aws eks update-kubeconfig --region us-east-1 --name ${{ vars.EKS_CLUSTER }}
      
    - name: Deploy to EKS
      run: |
            kubectl apply -f secrets.yaml
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml
